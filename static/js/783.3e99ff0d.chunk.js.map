{"version":3,"file":"static/js/783.3e99ff0d.chunk.js","mappings":"2OACA,GAAgB,SAAW,4BAA4B,OAAS,0BAA0B,MAAQ,0BCQ5FA,EAAiB,SAACC,GACtB,IAAIC,EAAO,kBAIX,OAHID,IACFC,EAAOD,EAAKE,MAAM,EAAG,IAEhBD,CACR,E,SCyCD,EAlDkB,SAAC,GAAe,IAAbE,EAAY,EAAZA,MACbC,EDPU,SAAAC,GAChB,IAAID,EAAS,sBAKb,OAJIC,GAAgC,IAApBA,EAASC,SAEvBF,EADuBC,EAASE,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IACjBC,KAAK,MAExBN,CACR,CCAgBO,CAAUR,EAAMC,QAExBQ,EAA6DT,EAA7DS,YAAaC,EAAgDV,EAAhDU,MAAOC,EAAyCX,EAAzCW,aAAcC,EAA2BZ,EAA3BY,aAAcC,EAAab,EAAba,SAEvD,OACE,iCACE,iBAAKC,UAAWC,EAAAA,MAAhB,WACE,yBACKN,IACD,gBACEK,UAAWC,EAAAA,OACXC,IAAG,yCAAoCP,GACvCQ,IAAKP,OAKX,iBAAKI,UAAWC,EAAAA,UAAhB,WACE,0BACGL,EADH,KAEGC,GAAgBf,EAAee,GAFlC,QAIA,wCAAgBC,GAAgBA,EAAaM,QAAQ,OAErD,qCACCL,IAAY,uBAAIA,IACH,KAAbA,IAAmB,2CACpB,oCACA,uBAAIZ,WAIR,oDACA,2BACE,yBACE,SAAC,KAAD,CAASkB,GAAG,OAAZ,qBAEF,yBACE,SAAC,KAAD,CAASA,GAAG,UAAZ,2BAGJ,SAAC,EAAAC,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,E,SCTD,EAnCqB,WAAO,IAAD,IACzB,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOtB,EAAP,KAAcuB,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAmBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAsBxD,OApBAC,EAAAA,EAAAA,YAAU,WACRT,GAAa,IAEbU,EAAAA,EAAAA,GAAY,SAAD,OAAUT,EAAV,MACRU,MACC,SAAAC,GAIA,GAFAd,EAASc,IAEJA,EACH,OAAOC,EAAAA,GAAAA,MAAY,gDAEtB,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZF,EAAAA,GAAAA,MAAY,2DACb,IACAK,SAAQ,kBAAMlB,GAAa,EAAnB,GACZ,GAAE,CAACC,KAGF,iCACE,UAAC,KAAD,CAASZ,UAAWC,EAAAA,SAAcI,GAAIW,EAAiBc,QAAvD,eAAiE,SAAC,MAAD,IAAjE,cACEpB,GAAaxB,IAAS,SAAC,EAAD,CAAWA,MAAOA,MAG/C,C,8FC1BYmC,EAAW,mCAAG,WAAOU,GAAP,uFACAC,EAAAA,EAAAA,IAAA,UAfV,iCAeU,OAAwBD,EAAxB,mBAdX,qCAaW,cACjBE,EADiB,gBAEVA,EAASV,KAFC,mFAAH,qD","sources":["webpack://react-homework-template/./src/components/MovieInfo/MovieInfo.module.css?df02","services/getMovieDetails.js","components/MovieInfo/MovieInfo.js","pages/MovieDetails.js","services/fetchMovies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"BackLink\":\"MovieInfo_BackLink__SCYEg\",\"Poster\":\"MovieInfo_Poster__xYYDm\",\"Movie\":\"MovieInfo_Movie__Vn7R9\"};","const getGenres = genreArr => {\n  let genres = 'No particular genre';\n  if (genreArr && genreArr.length !== 0) {\n    const obtainedGenres = genreArr.map(genre => genre.name);\n    genres = obtainedGenres.join(' ');\n  }\n  return genres;\n};\n\nconst getReleaseYear = (date) => {\n  let year = \"No release year\";\n  if (date) {\n    year = date.slice(0, 4)\n  }\n  return year;\n}\n\nexport { getGenres, getReleaseYear }","import css from './MovieInfo.module.css';\nimport { Suspense } from 'react';\nimport { NavLink, Outlet } from 'react-router-dom';\nimport { getGenres, getReleaseYear } from 'services/getMovieDetails';\n\n\nconst MovieInfo = ({ movie }) => {\n  const genres = getGenres(movie.genres);\n\n  const {poster_path, title, release_date, vote_average, overview } = movie;\n\n  return (\n    <>\n      <div className={css.Movie}>\n        <div>\n            {poster_path && (\n            <img\n              className={css.Poster}\n              src={`https://image.tmdb.org/t/p/w342${poster_path}`}\n              alt={title}\n            />\n          )}\n        </div>\n        \n        <div className={css.MovieInfo}>\n          <h1>\n            {title} (\n            {release_date && getReleaseYear(release_date)})\n          </h1>\n          <p>User Score: {vote_average && vote_average.toFixed(1)}</p>\n          \n          <h2>Overview</h2>\n          {overview && <p>{overview}</p>}\n          {overview === '' && <p>No information</p>}\n          <h2>Genres</h2>\n          <p>{genres}</p>\n        </div>\n      </div>\n\n      <h3>Additional information</h3>\n      <ul>\n        <li>\n          <NavLink to=\"cast\">Cast</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"reviews\">Reviews</NavLink>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\n\nexport default MovieInfo;\n","import { useParams, NavLink, useLocation } from 'react-router-dom';\nimport { useState, useEffect, useRef } from 'react';\nimport { fetchMovies } from 'services/fetchMovies';\nimport { toast } from 'react-hot-toast';\nimport MovieInfo from 'components/MovieInfo/MovieInfo';\nimport css from '../components/MovieInfo/MovieInfo.module.css';\nimport { HiArrowLongLeft } from \"react-icons/hi2\";\n\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocation = useRef(location.state?.from ?? \"/movies\")\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetchMovies(`movie/${movieId}?`)\n      .then(\n        data => {\n        \n        setMovie(data);\n        \n        if (!data) {\n          return toast.error('Sorry, there is nothing to match your search.');\n        }\n      })\n      .catch(error => {\n        console.log(error);\n        toast.error('Something went wrong. We could not complete your request');\n      })\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n  \n  return (\n    <>\n      <NavLink className={css.BackLink} to={backLinkLocation.current}> <HiArrowLongLeft/>Go back</NavLink>\n      {!isLoading && movie && <MovieInfo movie={movie}/>}\n    </>\n  )\n}\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'bf492d66596427c106e4ba61d2926d57'\n\n\n// export const fetchMovies = async (param) => {\n//     return fetch(`${BASE_URL}${param}?api_key=${API_KEY}`)\n//     .then(resp => {\n//         if(!resp.ok) {\n//             return Promise.reject(\n//                 new Error(resp.status)) \n//         }\n//         return resp.json()\n//     })\n// }\nexport const fetchMovies = async (param) => {\n    const response = await axios.get(`${BASE_URL}${param}api_key=${API_KEY}`)\n    return await response.data;\n}\n// https://api.themoviedb.org/3/movie/768362?api_key=bf492d66596427c106e4ba61d2926d57"],"names":["getReleaseYear","date","year","slice","movie","genres","genreArr","length","map","genre","name","join","getGenres","poster_path","title","release_date","vote_average","overview","className","css","src","alt","toFixed","to","Suspense","fallback","useState","setMovie","isLoading","setIsLoading","movieId","useParams","location","useLocation","backLinkLocation","useRef","state","from","useEffect","fetchMovies","then","data","toast","catch","error","console","log","finally","current","param","axios","response"],"sourceRoot":""}