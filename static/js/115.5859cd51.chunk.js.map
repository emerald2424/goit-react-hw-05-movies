{"version":3,"file":"static/js/115.5859cd51.chunk.js","mappings":"sMAsDA,UAjDa,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,IAEbI,EAAAA,EAAAA,GAAY,SAAD,OAAUH,EAAV,cACRI,MAAK,SAAAC,GAGJ,GAFAR,EAAQQ,EAAKT,OAERS,EAAKT,KACR,OAAOU,EAAAA,GAAAA,MAAY,8CAEtB,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZF,EAAAA,GAAAA,MAAY,2DACb,IACAK,SAAQ,kBAAMZ,GAAa,EAAnB,GACZ,GAAE,CAACC,KAGF,iCACIF,IACA,+BACE,wBACGF,EAAKgB,KAAI,SAAAC,GAAK,OACb,0BACGA,EAAMC,eAAiB,gBACtBC,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAKH,EAAMI,QAGb,uBAAIJ,EAAMI,QACV,uCAAeJ,EAAMK,eAPdL,EAAMM,GADF,SAcnBrB,GAA6B,IAAhBF,EAAKwB,SACd,2FAIX,C,8FCpCYjB,EAAW,mCAAG,WAAOkB,GAAP,uFACAC,EAAAA,EAAAA,IAAA,UAfV,iCAeU,OAAwBD,EAAxB,mBAdX,qCAaW,cACjBE,EADiB,gBAEVA,EAASlB,KAFC,mFAAH,qD","sources":["pages/Cast.js","services/fetchMovies.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovies } from 'services/fetchMovies';\nimport { toast } from 'react-hot-toast';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    fetchMovies(`movie/${movieId}/credits?`)\n      .then(data => {\n        setCast(data.cast);\n\n        if (!data.cast) {\n          return toast.error('Sorry, there is no information on the cast.');\n        }\n      })\n      .catch(error => {\n        console.log(error);\n        toast.error('Something went wrong. We could not complete your request');\n      })\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      {!isLoading && (\n        <>\n          <ul>\n            {cast.map(actor => (\n              <li key={actor.id}>\n                {actor.profile_path && (<img\n                  src={`https://image.tmdb.org/t/p/w185${actor.profile_path}`}\n                  alt={actor.name}\n                />)}\n                \n                <p>{actor.name}</p>\n                <p>Character: {actor.character}</p>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n      {!isLoading && cast.length === 0 && (\n            <p>We do not have any information about the cast for this movie.</p>\n          )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'bf492d66596427c106e4ba61d2926d57'\n\n\n// export const fetchMovies = async (param) => {\n//     return fetch(`${BASE_URL}${param}?api_key=${API_KEY}`)\n//     .then(resp => {\n//         if(!resp.ok) {\n//             return Promise.reject(\n//                 new Error(resp.status)) \n//         }\n//         return resp.json()\n//     })\n// }\nexport const fetchMovies = async (param) => {\n    const response = await axios.get(`${BASE_URL}${param}api_key=${API_KEY}`)\n    return await response.data;\n}\n// https://api.themoviedb.org/3/movie/768362?api_key=bf492d66596427c106e4ba61d2926d57"],"names":["useState","cast","setCast","isLoading","setIsLoading","movieId","useParams","useEffect","fetchMovies","then","data","toast","catch","error","console","log","finally","map","actor","profile_path","src","alt","name","character","id","length","param","axios","response"],"sourceRoot":""}